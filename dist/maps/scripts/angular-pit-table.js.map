{"version":3,"sources":["app/components/pit_table/pit-table.factory.js","app/app.module.js","app/components/pit_table/pit-table.provider.js","app/components/pit_table/pit-table.component.js","app/components/pit_table/pit-table-toolbar.component.js","app/components/pit_table/pit-table-pagination.component.js","app/components/pit_table/pit-table-pagination-size.component.js","app/components/pit_table/pit-table-data-render.component.js","app/components/pit_table/pit-table-checkbox.component.js","app/constants/environment.js","app/components/demo.component.js","templateCacheHtml.js"],"names":["ptColumnBuilder","PTColumn","renderWith","render","angular","isString","Error","this","withClass","clazz","withThClass","thClazz","withName","name","withOrder","sort","isUndefined","toLowerCase","notSortable","sortable","newColumn","id","column","Object","create","ptParamsBuilder","pitTable","PTParams","tableName","withParam","key","value","isNumber","isBoolean","params","withUrl","url","withMethod","method","inBody","toUpperCase","withHateoas","projection","withSelect","fieldName","selectId","noMultipleOrder","multipleOrder","newParams","module","config","pitTableProvider","ANGULAR_PIT_TABLE","setOptions","run","$loading","setDefaultOptions","text","loadingTableText","spinnerOptions","lines","length","width","radius","provider","PitTableOptions","option","pageRadious","defaultOptions","pageSize","pageSizes","indexOf","Math","min","apply","emptyTableText","uiFramework","isArray","every","size","newOptions","options","extend","$get","factory","component","templateUrl","bindings","ptColumns","ptParameters","ptData","selectedC","unSelectedC","controller","$log","$http","ENV","ctrl","isLoading","utils","pagination","page","totalRows","totalPages","search","allSelected","$onInit","loadData","getData","getSort","i","isDefined","push","object","backendUrl","data","start","then","response","_embedded","content","ptDataTemp","copy","initSelected","number","totalElements","error","finally","finish","columnOrder","thIconClass","fa-sort","fa-sort-desc","fa-sort-asc","md-asc","md-desc","cont","forEach","item","isCheck","require","ptableCtrl","removeSearch","filterModel","downloadCSV","getCSVFilename","showInfo","showInfoMaterial","from","to","previous","next","getSelectPages","pages","goToPage","selectSize","directiveName","$scope","$element","$attrs","$compile","append","inHeader","updateArray","exists","arraySplice","arrayPush","indexSplice","splice","selectItem","selectAll","selected","indexAdd","indexRemove","constant","PTColumnBuilder","PTParamsBuilder","ptParams","$templateCache","put"],"mappings":"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","file":"../../scripts/angular-pit-table.js","sourcesContent":["angular\n  .module('angular-pit-table')\n  .factory('PTColumnBuilder', ptColumnBuilder)\n  .factory('PTParamsBuilder', ptParamsBuilder);\n\nfunction ptColumnBuilder() {\n  var PTColumn = {\n    renderWith: function (render) {\n      if (!angular.isString(render) || render === '') {\n        throw new Error('render expected string but received ' + typeof render);\n      }\n      this.render = render;\n      return this;\n    },\n    withClass: function (clazz) {\n      if (!angular.isString(clazz) || clazz === '') {\n        throw new Error('clazz expected string but received ' + typeof clazz);\n      }\n      this.clazz = clazz;\n      return this;\n    },\n    withThClass: function (thClazz) {\n      if (!angular.isString(thClazz) || thClazz === '') {\n        throw new Error('thClazz expected string but received ' + typeof thClazz);\n      }\n      this.thClazz = thClazz;\n      return this;\n    },\n    withName: function (name) {\n      if (!angular.isString(name) || name === '') {\n        throw new Error('name expected string but received ' + typeof name);\n      }\n      this.name = name;\n      return this;\n    },\n    withOrder: function (sort) {\n      if (angular.isUndefined(sort) || (sort.toLowerCase() !== 'asc' && sort.toLowerCase() !== 'desc')) {\n        throw new Error('sort expected string with value \"asc\" or \"desc\" but received ' + typeof sort);\n      }\n      this.sort = sort.toLowerCase();\n      return this;\n    },\n    notSortable: function () {\n      this.sortable = false;\n      return this;\n    }\n  };\n\n  return {\n    newColumn: function (id) {\n      if (!angular.isString(id) || id === '') {\n        throw new Error('id expected string but received ' + typeof id);\n      }\n\n      var column = Object.create(PTColumn);\n      column.id = id;\n      column.name = id;\n      column.sortable = true;\n      column.sort = 'natural';\n\n      return column;\n    },\n    PTColumn: PTColumn\n  };\n}\n\n\nfunction ptParamsBuilder(pitTable) {\n  var PTParams = {\n    tableName: function (name) {\n      if (!angular.isString(name) || name === '') {\n        throw new Error('name expected string but received ' + typeof name);\n      }\n      this.name = name;\n      return this;\n    },\n    withParam: function (key, value) {\n      if (!angular.isString(key) || key === '') {\n        throw new Error('key expected string but received ' + typeof key);\n      }\n\n      if ((!angular.isString(value) || value === '') && !angular.isNumber(value) && !angular.isBoolean(value)) {\n        throw new Error('value expected string, number or boolean but received ' + typeof value);\n      }\n\n      if (key.toLowerCase() === 'search' || key.toLowerCase() === 'sort' || key.toLowerCase() === 'page' || key.toLowerCase() === 'size') {\n        throw new Error('key expected string except \"search\", \"sort\", \"page\" or \"size\" but received ' + typeof key);\n      }\n\n      this.params[key] = value;\n      return this;\n    },\n    withUrl: function (url) {\n      if (!angular.isString(url) || url === '') {\n        throw new Error('url expected string but received ' + typeof url);\n      }\n      this.url = url;\n      return this;\n    },\n    withMethod: function (method, inBody) {\n      if (!angular.isString(method) || method === '') {\n        throw new Error('method expected string but received ' + typeof method);\n      }\n\n      if (typeof (inBody) !== 'boolean') {\n        throw new Error('inBody expected boolean but received ' + typeof inBody);\n      }\n\n      if (method.toUpperCase() !== 'GET' && method.toLowerCase() !== 'POST') {\n        throw new Error('method expected string with value \"GET\" or \"POST\" but received ' + typeof method);\n      }\n      this.method = method;\n      this.inBody = method.toUpperCase() === 'POST' && inBody;\n\n      return this;\n    },\n    withHateoas: function (projection) {\n      if (!angular.isString(projection) || projection === '') {\n        throw new Error('projection expected string but received ' + typeof projection);\n      }\n      this.projection = projection;\n      return this;\n    },\n    withSelect: function (fieldName) {\n      if (!angular.isString(fieldName) || fieldName === '') {\n        throw new Error('fieldName expected string but received ' + typeof fieldName);\n      }\n      this.selectId = fieldName;\n      return this;\n    },\n    noMultipleOrder: function () {\n      this.multipleOrder = false;\n      return this;\n    }\n  };\n\n  return {\n    newParams: function () {\n      var params = Object.create(PTParams);\n      params.params = {};\n      params.method = pitTable.method;\n      params.inBody = false;\n      params.multipleOrder = true;\n\n      return params;\n    },\n    PTParams: PTParams\n  };\n}\n","angular\n  .module('angular-pit-table', ['ui.router', 'darthwade.dwLoading', 'ngMaterial', 'ngCsv'])\n  .config(function (pitTableProvider, ANGULAR_PIT_TABLE) {\n    pitTableProvider.setOptions(ANGULAR_PIT_TABLE);\n  })\n  .run(function ($loading, pitTable) {\n    $loading.setDefaultOptions({\n      text: pitTable.loadingTableText,\n      spinnerOptions: {\n        lines: 8,\n        length: 0,\n        width: 10,\n        radius: 15\n      }\n    });\n  });","angular\n  .module('angular-pit-table')\n  .provider('pitTable', function () {\n    var defaultOptions = {\n      pageRadious: 2,\n      pageSize: 20,\n      emptyTableText: 'Ningún dato disponible en esta tabla.',\n      loadingTableText: 'Cargando datos...',\n      method: 'GET',\n      pageSizes: [10, 25, 50, 100]\n    };\n    var newOptions = {};\n\n    this.setOptions = function (options) {\n      angular.extend(newOptions, options);\n    };\n\n    function PitTableOptions(option) {\n      this.pageRadious = angular.isNumber(option.pageRadious) ? option.pageRadious : defaultOptions.pageRadious;\n      if (angular.isNumber(option.pageSize)) {\n        if (option.pageSizes.indexOf(option.pageSize) > 0) {\n          this.pageSize = option.pageSize;\n        } else {\n          this.pageSize = Math.min.apply(null, option.pageSizes);\n        }\n      } else {\n        this.pageSize = defaultOptions.pageSize;\n      }\n      this.emptyTableText = option.emptyTableText;\n      this.loadingTableText = option.loadingTableText;\n      if (option.uiFramework && (option.uiFramework === 'bootstrap' || option.uiFramework === 'material')) {\n        this.uiFramework = option.uiFramework;\n      }\n      this.method = defaultOptions.method;\n      this.pageSizes = angular.isArray(option.pageSizes) && option.pageSizes.every(function (size) {\n        return angular.isNumber(size) && size > 0;\n      }) ? option.pageSizes : defaultOptions.pageSizes;\n    }\n\n    this.$get = function () {\n      return new PitTableOptions(angular.extend({}, defaultOptions, newOptions));\n    };\n  });\n","angular\n  .module('angular-pit-table')\n  .component('ptable', {\n    templateUrl: 'app/components/pit_table/pit-table.html',\n    bindings: {\n      ptColumns: '<',\n      ptParameters: '<',\n      ptData: '=',\n      selectedC: '<',\n      unSelectedC: '<'\n    },\n    controller: function (pitTable, $log, $http, ENV, $loading) {\n      var ctrl = this;\n      ctrl.emptyTableText = pitTable.emptyTableText;\n      ctrl.uiFramework = pitTable.uiFramework;\n      ctrl.isLoading = false;\n      ctrl.utils = {\n        sort: [],\n        pagination: {\n          page: 0,\n          size: pitTable.pageSize,\n          totalRows: 0,\n          totalPages: 0\n        },\n        search: '',\n        pageSizes: pitTable.pageSizes,\n        allSelected: false\n      };\n\n      ctrl.$onInit = function () {\n        ctrl.ptParameters.loadData = function () {\n          getData();\n        };\n\n        ctrl.ptParameters.loadData();\n      };\n\n      var getSort = function () {\n        ctrl.utils.sort = [];\n        for(var i = 0; i < ctrl.ptColumns.length; i++) {\n          if(ctrl.ptColumns[i].sortable && angular.isDefined(ctrl.ptColumns[i].sort)) {\n            if(!ctrl.ptParameters.multipleOrder){\n              if(ctrl.ptColumns[i].sort !== 'natural') {\n                ctrl.utils.sort.push(ctrl.ptColumns[i].id + ',' + ctrl.ptColumns[i].sort);\n                break;\n              }\n            }else{\n              ctrl.utils.sort.push(ctrl.ptColumns[i].id + ',' + ((ctrl.ptColumns[i].sort === 'natural') ? 'asc' : ctrl.ptColumns[i].sort));\n            }\n          }\n        }  \n      };\n\n      var getData = function () {\n        getSort();\n        var object = {\n          url: ENV.backendUrl + ctrl.ptParameters.url,\n          method: ctrl.ptParameters.method\n        };\n\n        object.params = {\n          sort: ctrl.utils.sort,\n          page: ctrl.utils.pagination.page,\n          size: ctrl.utils.pagination.size\n        };\n\n        if (ctrl.utils.search) {\n          object.params.search = ctrl.utils.search;\n        }\n\n        if (ctrl.ptParameters.projection) {\n          angular.extend(object.params, {projection: ctrl.ptParameters.projection});\n        }\n\n        if (!ctrl.ptParameters.inBody || ctrl.ptParameters.projection) {\n          angular.extend(object.params, ctrl.ptParameters.params);\n        } else {\n          object.data = ctrl.ptParameters.params;\n        }\n\n        $loading.start('data');\n        ctrl.isLoading = true;\n        $http(object).then(function (response) {\n          var data = ctrl.ptParameters.projection ? response.data._embedded[ctrl.ptParameters.projection] : response.data.content;\n          ctrl.ptData = data;\n          if (ctrl.ptParameters.selectId) {\n            ctrl.ptDataTemp = angular.copy(data);\n            initSelected(data);\n          }\n          ctrl.utils.pagination.page = ctrl.ptParameters.projection ? response.data.page.number : response.data.number;\n          ctrl.utils.pagination.totalRows = ctrl.ptParameters.projection ? response.data.page.totalElements : response.data.totalElements;\n          ctrl.utils.pagination.totalPages = ctrl.ptParameters.projection ? response.data.page.totalPages : response.data.totalPages;\n        }, function () {\n          $log.error('Ha ocurrido un error al intentar obtener la información.');\n        }).finally(function () {\n          $loading.finish('data');\n          ctrl.isLoading = false;\n        });\n      };\n\n      ctrl.columnOrder = function (column) {\n        if (angular.isUndefined(column.sort) || !ctrl.ptData.length) {\n          return;\n        }\n\n        for(var i = 0; i < ctrl.ptColumns.length; i++) {\n          if (column.id === ctrl.ptColumns[i].id) {\n            if (ctrl.ptColumns[i].sort === 'natural') {\n              ctrl.ptColumns[i].sort = 'asc';\n            } else if (ctrl.ptColumns[i].sort === 'asc') {\n              ctrl.ptColumns[i].sort = 'desc';\n            } else {\n              ctrl.ptColumns[i].sort = 'natural';\n            }\n\n            if(ctrl.ptParameters.multipleOrder) {\n              break;\n            }\n          } else {\n            if(!ctrl.ptParameters.multipleOrder) {\n              ctrl.ptColumns[i].sort = 'natural';\n            }\n          }\n        }\n        ctrl.ptParameters.loadData();\n      };\n\n      ctrl.thIconClass = function (sort) {\n        if (angular.isDefined(sort)) {\n          return ctrl.uiFramework === 'bootstrap' ? {\n            'fa-sort': sort === 'natural',\n            'fa-sort-desc': sort === 'desc',\n            'fa-sort-asc': sort === 'asc'\n          } : {\n            'md-asc': sort === 'natural' || sort === 'asc',\n            'md-desc': sort === 'desc'\n          };\n        }\n      };\n\n      var initSelected = function (data) {\n        var cont = 0;\n        angular.forEach(data, function (item) {\n          if (item.isCheck) {\n            cont++;\n          }\n\n          angular.forEach(ctrl.selectedC, function (value) {\n            if (item[ctrl.ptParameters.selectId] === value) {\n              item.isCheck = true;\n              cont++;\n            }\n          });\n\n          angular.forEach(ctrl.unSelectedC, function (value) {\n            if (item[ctrl.ptParameters.selectId] === value) {\n              item.isCheck = false;\n              cont--;\n            }\n          });\n        });\n\n        ctrl.utils.allSelected = (cont === data.length && data.length > 0);\n      };\n    }\n  });\n","angular\n  .module('angular-pit-table')\n  .component('pttoolbar', {\n    templateUrl: 'app/components/pit_table/pit-table-toolbar.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    controller: function ($http, ENV, $log) {\n      var ctrl = this;\n\n      ctrl.search = function (text) {\n  \t\tctrl.ptableCtrl.utils.pagination.page = 0;\n        ctrl.ptableCtrl.utils.search = text;\n        ctrl.ptableCtrl.ptParameters.loadData();      \t      \n      };\n\n      ctrl.removeSearch = function () {\n        if (!ctrl.filterModel) {\n          return;\n        }\n        delete ctrl.filterModel;\n        ctrl.ptableCtrl.utils.search = '';\n        ctrl.ptableCtrl.ptParameters.loadData();\n      };\n\n      ctrl.downloadCSV = function () {\n        var object = {\n          url: ENV.backendUrl + ctrl.ptableCtrl.ptParameters.url,\n          method: ctrl.ptableCtrl.ptParameters.method\n        };\n\n        object.params = {\n          sort: ctrl.ptableCtrl.utils.sort\n        };\n\n        if (ctrl.ptableCtrl.utils.search) {\n          object.params.search = ctrl.ptableCtrl.utils.search;\n        }\n\n        if (ctrl.ptableCtrl.ptParameters.projection) {\n          object.params = {projection: ctrl.ptableCtrl.ptParameters.projection};\n        }\n\n        if (!ctrl.ptableCtrl.ptParameters.inBody || ctrl.ptableCtrl.ptParameters.projection) {\n          angular.extend(object.params, ctrl.ptableCtrl.ptParameters.params);\n        } else {\n          object.data = ctrl.ptableCtrl.ptParameters.params;\n        }\n\n        return $http(object).then(function (response) {\n          return ctrl.ptableCtrl.ptParameters.projection ? response.data._embedded[ctrl.ptableCtrl.ptParameters.projection] : response.data.content;\n        }, function () {\n          $log.error('Ha ocurrido un error al intentar obtener la información.');\n        });\n      };\n\n      ctrl.getCSVFilename = function() {\n        return ctrl.ptableCtrl.ptParameters.tableName ? ctrl.ptableCtrl.ptParameters.tableName : 'export.csv';\n      };\n    }\n  });\n","angular\n  .module('angular-pit-table')\n  .component('ptpage', {\n    templateUrl: 'app/components/pit_table/pit-table-pagination.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    controller: function () {\n    \tvar ctrl = this;\n\n    \tctrl.showInfo = function () {\n    \t\treturn 'Mostrando registros del '+ ((ctrl.ptableCtrl.utils.pagination.page * ctrl.ptableCtrl.utils.pagination.size) + 1) +' al '+ \n    \t\t(ctrl.ptableCtrl.utils.pagination.totalRows%ctrl.ptableCtrl.utils.pagination.size === 0 ? (ctrl.ptableCtrl.utils.pagination.page + 1) * ctrl.ptableCtrl.utils.pagination.size : ctrl.ptableCtrl.utils.pagination.totalRows) +' de '+ (ctrl.ptableCtrl.utils.pagination.totalRows);\n    \t};\n\n    \tctrl.showInfoMaterial = function () {\n    \t\tvar from = (ctrl.ptableCtrl.utils.pagination.page * ctrl.ptableCtrl.utils.pagination.size) + 1;\n    \t\tvar to = (ctrl.ptableCtrl.utils.pagination.page * ctrl.ptableCtrl.utils.pagination.size) + ctrl.ptableCtrl.utils.pagination.size;\n    \t\treturn from +' - '+ (to > ctrl.ptableCtrl.utils.pagination.totalRows ? ctrl.ptableCtrl.utils.pagination.totalRows : to) +' de '+ ctrl.ptableCtrl.utils.pagination.totalRows;\n    \t};\n\n    \tctrl.previous = function () {\n    \t\tctrl.ptableCtrl.utils.pagination.page--;\n    \t\tctrl.ptableCtrl.ptParameters.loadData();\n    \t};\n\n    \tctrl.next = function () {\n    \t\tctrl.ptableCtrl.utils.pagination.page++;\n    \t\tctrl.ptableCtrl.ptParameters.loadData();\n    \t};\n\n    \tctrl.getSelectPages = function () {\n\t\t\tvar pages = [];\n\t    \tfor(var i = 0; i < ctrl.ptableCtrl.utils.pagination.totalPages; i++) {\n\t    \t\tpages.push(i);\n\t    \t}\n\t    \treturn pages;\n\t\t};\n\n\t\tctrl.goToPage = function (page) {\n    \t\tctrl.ptableCtrl.ptParameters.loadData();\n\t\t};    \t\n    }\n  });\n","angular\n  .module('angular-pit-table')\n  .component('ptpsize', {\n    templateUrl: 'app/components/pit_table/pit-table-pagination-size.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    controller: function () {\n    \tvar ctrl = this;\n\n      \tctrl.$onInit = function () {\n        \tctrl.pageSizes = ctrl.ptableCtrl.utils.pageSizes;\n        \tctrl.size = ctrl.ptableCtrl.utils.pagination.size;\n      \t};\n\n      \tctrl.selectSize = function (size) {\n      \t\tctrl.ptableCtrl.utils.pagination.page = 0;\n        \tctrl.ptableCtrl.utils.pagination.size = size;\n        \tctrl.ptableCtrl.ptParameters.loadData();\n      \t};\n    }\n  });\n","angular\n    .module('angular-pit-table')\n    .component('ptdrender', {\n        bindings: {\n            ptData: '<',\n            directiveName: '<'\n        },\n        require: {\n            ptableCtrl: '^ptable'\n        },\n        controller: function ($scope, $element, $attrs, $compile) {\n            var ctrl = this;\n            $element.append($compile('<'+ctrl.directiveName+ ' row-data=\"$ctrl.ptData\"></'+ctrl.directiveName+'>')($scope));\n        }\n    });\n","angular\n  .module('angular-pit-table')\n  .component('ptcheckbox', {\n    templateUrl: 'app/components/pit_table/pit-table-checkbox.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    bindings: {\n      inHeader: '=',\n      item: '<'\n    },\n    controller: function () {\n      var ctrl = this;\n      ctrl.$onInit = function () {\n        ctrl.selectItem = function (item) {\n          var cont = 0;\n          updateArray(item);\n\n          angular.forEach(ctrl.ptableCtrl.ptData, function (value) {\n            if (value.isCheck) {\n              cont++;\n            }\n          });\n\n          ctrl.ptableCtrl.utils.allSelected = (cont === ctrl.ptableCtrl.ptData.length && ctrl.ptableCtrl.ptData.length > 0);\n        };\n\n        ctrl.selectAll = function (selected) {\n          angular.forEach(ctrl.ptableCtrl.ptDataTemp, function (value, key) {\n            ctrl.ptableCtrl.ptData[key].isCheck = selected;\n            var indexAdd = -1;\n            var indexRemove = -1;\n            if (selected) {\n              indexAdd = ctrl.ptableCtrl.selectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (!value.isCheck && indexAdd < 0) {\n                ctrl.ptableCtrl.selectedC.push(value[ctrl.ptableCtrl.ptParameters.selectId.selectId]);\n              }\n\n              indexRemove = ctrl.ptableCtrl.unSelectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (indexRemove > -1) {\n                ctrl.ptableCtrl.unSelectedC.splice(indexRemove, 1);\n              }\n            } else {\n              indexRemove = ctrl.ptableCtrl.selectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (value.isCheck && indexRemove < 0) {\n                ctrl.ptableCtrl.unSelectedC.push(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              }\n\n              indexAdd = ctrl.ptableCtrl.selectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (indexAdd > -1) {\n                ctrl.ptableCtrl.selectedC.splice(indexAdd, 1);\n              }\n            }\n          });\n        };\n      };\n\n      function updateArray(item) {\n        var exists = false;\n        var arraySplice = item.isCheck ? ctrl.ptableCtrl.unSelectedC : ctrl.ptableCtrl.selectedC;\n        var arrayPush = item.isCheck ? ctrl.ptableCtrl.selectedC : ctrl.ptableCtrl.unSelectedC;\n        var indexSplice = arraySplice.indexOf(item[ctrl.ptableCtrl.ptParameters.selectId]);\n\n        angular.forEach(ctrl.ptableCtrl.ptDataTemp, function (value) {\n          var isCheck = item.isCheck ? !value.isCheck : value.isCheck;\n          if (item[ctrl.ptableCtrl.ptParameters.selectId] === value[ctrl.ptableCtrl.ptParameters.selectId] && isCheck) {\n            exists = true;\n          }\n        });\n\n        if (arraySplice.length > 0 && indexSplice > -1) {\n          arraySplice.splice(indexSplice, 1);\n        }\n\n        if (exists) {\n          arrayPush.push(item[ctrl.ptableCtrl.ptParameters.selectId]);\n        }\n      }\n    }\n  });\n","angular.module('angular-pit-table')\n.constant('ANGULAR_PIT_TABLE', {\n  pageRadious: 2,\n  pageSize: 10,\n  emptyTableText: 'Ningún dato disponible en esta tabla.',\n  loadingTableText: 'Cargando datos...',\n  uiFramework: 'material',\n  pageSizes: [\n    10,\n    25,\n    50,\n    100\n  ]\n})\n.constant('ENV', {\n  backendUrl: 'http://localhost:3000'\n});\n","angular\n  .module('angular-pit-table')\n  .component('demo', {\n    templateUrl: 'app/components/demo.html',\n    controller: function (PTColumnBuilder, PTParamsBuilder) {\n      var ctrl = this;\n\n      ctrl.ptColumns = [\n        PTColumnBuilder.newColumn('id'),\n        PTColumnBuilder.newColumn('title').withName('Título').withOrder('asc').withClass('text-center'),\n        PTColumnBuilder.newColumn('body').withName('Contenido').withOrder('asc'),\n        PTColumnBuilder.newColumn('userId').withName('Usuario'),\n        PTColumnBuilder.newColumn('title').withName('test4'),\n        PTColumnBuilder.newColumn('title').withName('test7'),\n        PTColumnBuilder.newColumn('title').withName('test1'),\n        PTColumnBuilder.newColumn('title').withName('test6')\n      ];\n\n      ctrl.ptParams = PTParamsBuilder.newParams().withUrl('/content').withMethod('GET', false);\n\n      ctrl.selectedC = [];\n      ctrl.unSelectedC = [];\n    }\n  });\n","angular.module('angular-pit-table').run(['$templateCache', function($templateCache) {$templateCache.put('app/components/demo.html','<h1>Demo PIT Table</h1>\\n<ptable pt-columns=\"$ctrl.ptColumns\" pt-data=\"$ctrl.data\" pt-parameters=\"$ctrl.ptParams\" selected-c=\"$ctrl.selectedC\" un-selected-c=\"$ctrl.unSelectedC\"></ptable>\\n');\n$templateCache.put('app/components/pit_table/pit-table-checkbox.html','<div ng-if=\"$ctrl.inHeader && ($ctrl.ptableCtrl.uiFramework === \\'bootstrap\\' || !$ctrl.ptableCtrl.uiFramework)\" ng-class=\"{\\'header-checkbox\\' : $ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'}\">\\n\\t<input type=\"checkbox\" class=\"cursor-pointer\" ng-change=\"$ctrl.selectAll($ctrl.ptableCtrl.utils.allSelected)\" ng-model=\"$ctrl.ptableCtrl.utils.allSelected\">\\n</div>\\n<div ng-if=\"!$ctrl.inHeader && ($ctrl.ptableCtrl.uiFramework === \\'bootstrap\\' || !$ctrl.ptableCtrl.uiFramework)\" ng-class=\"{\\'body-checkbox\\' : $ctrl.ptableCtrl.uiFramework === \\'bootstrap\\' || !$ctrl.ptableCtrl.uiFramework}\">\\n\\t<input type=\"checkbox\" class=\"cursor-pointer\" ng-change=\"$ctrl.selectItem($ctrl.item)\" ng-model=\"$ctrl.item.isCheck\">\\n</div>\\n<md-checkbox ng-if=\"$ctrl.inHeader && $ctrl.ptableCtrl.uiFramework === \\'material\\'\" ng-change=\"$ctrl.selectAll($ctrl.ptableCtrl.utils.allSelected)\" class=\"margin-auto\" ng-model=\"$ctrl.ptableCtrl.utils.allSelected\" aria-label=\"\">\\n</md-checkbox>\\n<md-checkbox ng-if=\"!$ctrl.inHeader && $ctrl.ptableCtrl.uiFramework === \\'material\\'\" ng-change=\"$ctrl.selectItem($ctrl.item)\" class=\"margin-auto\" ng-model=\"$ctrl.item.isCheck\" aria-label=\"\"></md-checkbox>\\n');\n$templateCache.put('app/components/pit_table/pit-table-pagination-size.html','<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'material\\'\">\\t\\n\\t<div class=\"text-rows-per-page\">Filas por p\\xE1gina:</div>\\n\\t<md-select class=\"md-table-select md-select-paginator\" ng-model=\"$ctrl.size\" ng-change=\"$ctrl.selectSize($ctrl.size)\">\\n\\t\\t<md-option ng-repeat=\"size in $ctrl.pageSizes\" ng-value=\"size\">{{ size }}</md-option>\\n\\t</md-select>\\n</div>\\n\\n<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'\">\\n\\t<label for=\"size\">Mostrar</label>\\n\\t<div class=\"form-group\">\\n\\t\\t<select class=\"form-control\" name=\"size\" id=\"size\" ng-model=\"$ctrl.size\" ng-change=\"$ctrl.selectSize($ctrl.size)\" ng-options=\"size for size in $ctrl.pageSizes track by size\"></select>\\n\\t</div>\\n</div>\\n\\n<div ng-if=\"!$ctrl.ptableCtrl.uiFramework\">\\n\\t<label>\\n      Mostrar\\n      <select ng-model=\"$ctrl.size\" ng-change=\"$ctrl.selectSize($ctrl.size)\" ng-options=\"size for size in $ctrl.pageSizes track by size\"></select>\\n      entradas\\n    </label>\\n</div>\\n');\n$templateCache.put('app/components/pit_table/pit-table-pagination.html','<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'\" class=\"row\">\\n  <div class=\"col-xs-12 col-md-6\">\\n    {{ $ctrl.showInfo() }}\\n  </div>\\n  <div class=\"col-xs-12 col-md-6 text-right\">\\n    1, 2, 3, 4...\\n  </div>\\n</div>\\n<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'material\\'\" class=\"md-table-pagination\">\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<div class=\"text-rows-per-page\">P\\xE1gina:</div>\\n\\t\\t<md-select class=\"md-table-select md-select-paginator\" ng-model=\"$ctrl.ptableCtrl.utils.pagination.page\" ng-change=\"$ctrl.goToPage()\">\\n\\t\\t\\t<md-option ng-repeat=\"page in $ctrl.getSelectPages()\" ng-value=\"page\">{{ page + 1 }}</md-option>\\n\\t\\t</md-select>\\n\\t</div>\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<ptpsize></ptpsize>\\n\\t</div>\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<span> {{ $ctrl.showInfoMaterial() }} </span>\\n\\t</div>\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<button class=\"md-icon-button md-button md-ink-ripple margin-0\" type=\"button\" ng-click=\"$ctrl.previous()\" ng-disabled=\"$ctrl.ptableCtrl.utils.pagination.page == 0\">\\n          <md-icon class=\"material-icons\"><i class=\"material-icons\">keyboard_arrow_left</i></md-icon>\\n        </button>\\n        <button style=\"margin: 0;\" class=\"md-icon-button md-button md-ink-ripple margin-0\" type=\"button\" ng-click=\"$ctrl.next()\" ng-disabled=\"$ctrl.ptableCtrl.utils.pagination.page == ($ctrl.ptableCtrl.utils.pagination.totalPages - 1)\">\\n          <md-icon class=\"material-icons\"><i class=\"material-icons\">keyboard_arrow_right</i></md-icon>\\n        </button>\\n\\t</div>\\n</div>');\n$templateCache.put('app/components/pit_table/pit-table-toolbar.html','<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'material\\'\">\\n  <md-card>\\n    <md-toolbar class=\"md-table-toolbar md-default\">\\n      <div class=\"md-toolbar-tools\">\\n        <md-icon class=\"material-icons\">search</md-icon>\\n        <form flex name=\"filter.form\">\\n          <input ng-model=\"$ctrl.filterModel\" ng-change=\"$ctrl.search($ctrl.filterModel)\" class=\"md-block\">\\n        </form>\\n        <button class=\"md-icon-button md-button md-ink-ripple\" type=\"button\" ng-click=\"$ctrl.removeSearch()\" ng-if=\"$ctrl.filterModel\">\\n          <md-icon class=\"material-icons\">close</md-icon>\\n        </button>\\n        <button class=\"md-icon-button md-button md-ink-ripple\" type=\"button\" ng-csv=\"$ctrl.downloadCSV()\" csv-label=\"true\" filename=\"export.csv\">\\n          <md-icon class=\"material-icons\">file_download</md-icon>\\n        </button>\\n      </div>\\n    </md-toolbar>\\n  </md-card>\\n</div>\\n\\n<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'\" class=\"row\">\\n  <form class=\"form-inline\">\\n    <div class=\"col-xs-12 col-sm-6\">\\n      <ptpsize></ptpsize>\\n    </div>\\n    <div class=\"col-xs-12 col-sm-6 search-control\">\\n      <label for=\"search\">Buscar</label>\\n      <div class=\"input-group\">\\n        <input class=\"form-control\" name=\"search\" id=\"search\" ng-model=\"$ctrl.filterModel\" ng-change=\"$ctrl.search($ctrl.filterModel)\">\\n        <span class=\"input-group-addon input-group-addon-custom\">\\n            <i class=\"fa fa-close\" ng-click=\"$ctrl.removeSearch()\"></i>\\n        </span>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\\n<div ng-if=\"!$ctrl.ptableCtrl.uiFramework\" class=\"height-no-bootstrap\">\\n  <div class=\"size-control\">\\n    <ptpsize></ptpsize>\\n  </div>\\n  <div class=\"search-control\">\\n    <label>\\n      Buscar:\\n      <input class=\"input-search\" ng-model=\"$ctrl.filterModel\" ng-change=\"$ctrl.search($ctrl.filterModel)\">\\n      <button class=\"close-icon\" type=\"reset\" ng-click=\"$ctrl.removeSearch()\" ng-if=\"$ctrl.filterModel\"></button>\\n    </label>\\n  </div>\\n</div>\\n');\n$templateCache.put('app/components/pit_table/pit-table.html','<div dw-loading=\"data\" ng-class=\"{ \\'md-table-container\\' : $ctrl.uiFramework === \\'material\\', \\'container-fluid\\': $ctrl.uiFramework === \\'bootstrap\\', \\'table-container\\': !$ctrl.uiFramework }\">\\n  <pttoolbar></pttoolbar>\\n  <div ng-class=\"{\\'md-card-pitable\\' : $ctrl.uiFramework === \\'material\\'}\">\\n    <table ng-class=\"{ \\'table table-bordered table-striped table-responsive\\': $ctrl.uiFramework === \\'bootstrap\\', \\'md-table\\': $ctrl.uiFramework === \\'material\\', \\'md-row-select\\': $ctrl.uiFramework === \\'material\\' && $ctrl.ptParams.selectId, \\'dw-loading-container\\': $ctrl.isLoading }\">\\n      <thead ng-class=\"{ \\'md-head\\': $ctrl.uiFramework === \\'material\\' }\">\\n        <tr ng-class=\"{ \\'md-row\\': $ctrl.uiFramework === \\'material\\' }\">\\n          <th ng-if=\"$ctrl.ptParameters.selectId && $ctrl.ptData.length\" ng-class=\"{\\'th-checkbox\\' : $ctrl.uiFramework === \\'bootstrap\\' || !$ctrl.uiFramework, \\'padding-only-left\\' : $ctrl.uiFramework === \\'material\\'}\">\\n            <ptcheckbox in-header=\"true\"></ptcheckbox>\\n          </th>\\n          <th ng-repeat=\"column in $ctrl.ptColumns\" class=\"{{ column.thClazz }}\" ng-class=\"{ \\'sortable\\': column.sortable && $ctrl.ptData.length && $ctrl.uiFramework === \\'bootstrap\\', \\'md-sort\\': column.sortable && $ctrl.ptData.length && $ctrl.uiFramework === \\'material\\', \\'md-column\\': $ctrl.uiFramework === \\'material\\', \\'md-active\\': $ctrl.uiFramework === \\'material\\' && column.sortable && column.sort !== \\'natural\\' }\">\\n            <span ng-click=\"$ctrl.columnOrder(column)\">\\n              {{ column.name }}\\n              <fieldset ng-if=\"column.sortable && $ctrl.ptData.length\">\\n                <i class=\"pull-right fa\" ng-class=\"$ctrl.thIconClass(column.sort)\" ng-if=\"$ctrl.uiFramework === \\'bootstrap\\'\"></i>\\n                <md-icon class=\"md-sort-icon\" ng-class=\"$ctrl.thIconClass(column.sort)\" ng-if=\"$ctrl.uiFramework === \\'material\\'\">arrow_upward</md-icon>\\n                </fieldset>\\n            </span>\\n          </th>\\n        </tr>\\n      </thead>\\n      <tbody ng-class=\"{ \\'md-body\\': $ctrl.uiFramework === \\'material\\' }\">\\n        <tr ng-class=\"{ \\'md-row\\': $ctrl.uiFramework === \\'material\\' }\" ng-repeat=\"data in $ctrl.ptData\">\\n          <td ng-if=\"$ctrl.ptParameters.selectId\" class=\"td-checkbox\" ng-class=\"{ \\'md-cell md-checkbox-cell\\': $ctrl.uiFramework === \\'material\\' }\">\\n            <ptcheckbox in-header=\"false\" item=\"data\"></ptcheckbox>\\n          </td>\\n          <td ng-repeat=\"column in $ctrl.ptColumns\" ng-class=\"{ \\'md-cell\\': $ctrl.uiFramework === \\'material\\' }\" class=\"{{ column.clazz }}\">            \\n            <span ng-if=\"!column.render\">{{ data[column.id] }}</span>\\n            <ptdrender ng-if=\"column.render\" directive-name=\"column.render\" pt-data=\"data\"></ptdrender>\\n          </td>\\n        </tr>\\n        <tr ng-if=\"!$ctrl.ptData.length\" class=\"text-center\"><td colspan=\"{{ $ctrl.ptColumns.length }}\">{{ $ctrl.emptyTableText }}</td></tr>\\n      </tbody>\\n    </table>\\n    <ptpage></ptpage>\\n  </div>\\n</div>\\n');}]);"]}