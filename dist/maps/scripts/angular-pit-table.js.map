{"version":3,"sources":["app/components/pit_table/pit-table.factory.js","app/app.module.js","app/components/pit_table/pit-table.provider.js","app/components/pit_table/pit-table.component.js","app/components/pit_table/pit-table-toolbar.component.js","app/components/pit_table/pit-table-pagination.component.js","app/components/pit_table/pit-table-pagination-size.component.js","app/components/pit_table/pit-table-data-render.component.js","app/components/pit_table/pit-table-checkbox.component.js","app/constants/environment.js","app/components/demo.component.js","templateCacheHtml.js"],"names":["ptColumnBuilder","PTColumn","renderWith","render","angular","isString","Error","this","renderFn","withClass","clazz","withThClass","thClazz","withName","name","withOrder","sort","isUndefined","toLowerCase","notSortable","sortable","notExportable","exportable","newColumn","id","column","Object","create","ptParamsBuilder","pitTable","PTParams","tableName","withParam","key","value","isNumber","isBoolean","params","withUrl","url","withMethod","method","inBody","toUpperCase","withHateoas","projection","withSelect","fieldName","selectId","noMultipleOrder","multipleOrder","newParams","module","config","pitTableProvider","ANGULAR_PIT_TABLE","setOptions","cfpLoadingBarProvider","includeBar","parentSelector","provider","PitTableOptions","option","pageRadious","defaultOptions","pageSize","pageSizes","indexOf","Math","min","apply","emptyTableText","loadingTableText","uiFramework","isArray","every","size","searchTrigger","newOptions","options","extend","$get","factory","component","templateUrl","bindings","ptColumns","ptParameters","ptData","selectedC","unSelectedC","controller","$log","$http","$rootScope","cfpLoadingBar","ctrl","isLoading","utils","pagination","page","totalRows","totalPages","search","allSelected","$on","$onInit","loadData","getData","getSort","i","length","isDefined","push","object","data","start","then","response","_embedded","content","ptDataTemp","copy","initSelected","number","totalElements","error","finally","complete","columnOrder","thIconClass","fa-sort","fa-sort-desc","fa-sort-asc","md-asc","md-desc","cont","forEach","item","isCheck","require","ptableCtrl","text","filterModel","removeSearch","downloadCSV","ignoreLoadingBar","setColumnsNameCSV","getCSVFilename","fieldNames","fieldIds","j","containsObject","dataKeys","keys","tempData","k","obj","property1","property2","showInfo","showInfoMaterial","from","to","previous","next","getSelectPages","pages","goToPage","selectSize","directiveName","$scope","$element","$attrs","$compile","append","inHeader","updateArray","exists","arraySplice","arrayPush","indexSplice","splice","selectItem","selectAll","selected","indexAdd","indexRemove","constant","PTColumnBuilder","PTParamsBuilder","console","log","ptParams","run","$templateCache","put"],"mappings":"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","file":"../../scripts/angular-pit-table.js","sourcesContent":["angular\n  .module('angular-pit-table')\n  .factory('PTColumnBuilder', ptColumnBuilder)\n  .factory('PTParamsBuilder', ptParamsBuilder);\n\nfunction ptColumnBuilder() {\n  var PTColumn = {\n    renderWith: function (render) {\n      if (!angular.isString(render) || render === '') {\n        throw new Error('render expected string but received ' + typeof render);\n      }\n      this.render = render;\n      this.renderFn = null;\n      return this;\n    },\n    withClass: function (clazz) {\n      if (!angular.isString(clazz) || clazz === '') {\n        throw new Error('clazz expected string but received ' + typeof clazz);\n      }\n      this.clazz = clazz;\n      return this;\n    },\n    withThClass: function (thClazz) {\n      if (!angular.isString(thClazz) || thClazz === '') {\n        throw new Error('thClazz expected string but received ' + typeof thClazz);\n      }\n      this.thClazz = thClazz;\n      return this;\n    },\n    withName: function (name) {\n      if (!angular.isString(name) || name === '') {\n        throw new Error('name expected string but received ' + typeof name);\n      }\n      this.name = name;\n      return this;\n    },\n    withOrder: function (sort) {\n      if (angular.isUndefined(sort) || (sort.toLowerCase() !== 'asc' && sort.toLowerCase() !== 'desc')) {\n        throw new Error('sort expected string with value \"asc\" or \"desc\" but received ' + typeof sort);\n      }\n      this.sort = sort.toLowerCase();\n      return this;\n    },\n    notSortable: function () {\n      this.sortable = false;\n      return this;\n    },\n    notExportable: function () {\n      this.exportable = false;\n      return this;\n    }\n  };\n\n  return {\n    newColumn: function (id) {\n      if (!angular.isString(id) || id === '') {\n        throw new Error('id expected string but received ' + typeof id);\n      }\n\n      var column = Object.create(PTColumn);\n      column.id = id;\n      column.name = id;\n      column.sortable = true;\n      column.sort = 'natural';\n      column.exportable = true;\n\n      return column;\n    },\n    PTColumn: PTColumn\n  };\n}\n\n\nfunction ptParamsBuilder(pitTable) {\n  var PTParams = {\n    tableName: function (name) {\n      if (!angular.isString(name) || name === '') {\n        throw new Error('name expected string but received ' + typeof name);\n      }\n      this.name = name;\n      return this;\n    },\n    withParam: function (key, value) {\n      if (!angular.isString(key) || key === '') {\n        throw new Error('key expected string but received ' + typeof key);\n      }\n\n      if ((!angular.isString(value) || value === '') && !angular.isNumber(value) && !angular.isBoolean(value)) {\n        throw new Error('value expected string, number or boolean but received ' + typeof value);\n      }\n\n      if (key.toLowerCase() === 'search' || key.toLowerCase() === 'sort' || key.toLowerCase() === 'page' || key.toLowerCase() === 'size') {\n        throw new Error('key expected string except \"search\", \"sort\", \"page\" or \"size\" but received ' + typeof key);\n      }\n\n      this.params[key] = value;\n      return this;\n    },\n    withUrl: function (url) {\n      if (!angular.isString(url) || url === '') {\n        throw new Error('url expected string but received ' + typeof url);\n      }\n      this.url = url;\n      return this;\n    },\n    withMethod: function (method, inBody) {\n      if (!angular.isString(method) || method === '') {\n        throw new Error('method expected string but received ' + typeof method);\n      }\n\n      if (typeof (inBody) !== 'boolean') {\n        throw new Error('inBody expected boolean but received ' + typeof inBody);\n      }\n\n      if (method.toUpperCase() !== 'GET' && method.toLowerCase() !== 'POST') {\n        throw new Error('method expected string with value \"GET\" or \"POST\" but received ' + typeof method);\n      }\n      this.method = method;\n      this.inBody = method.toUpperCase() === 'POST' && inBody;\n\n      return this;\n    },\n    withHateoas: function (projection) {\n      if (!angular.isString(projection) || projection === '') {\n        throw new Error('projection expected string but received ' + typeof projection);\n      }\n      this.projection = projection;\n      return this;\n    },\n    withSelect: function (fieldName) {\n      if (!angular.isString(fieldName) || fieldName === '') {\n        throw new Error('fieldName expected string but received ' + typeof fieldName);\n      }\n      this.selectId = fieldName;\n      return this;\n    },\n    noMultipleOrder: function () {\n      this.multipleOrder = false;\n      return this;\n    }\n  };\n\n  return {\n    newParams: function () {\n      var params = Object.create(PTParams);\n      params.params = {};\n      params.method = pitTable.method;\n      params.inBody = false;\n      params.multipleOrder = true;\n\n      return params;\n    },\n    PTParams: PTParams\n  };\n}\n","angular\n  .module('angular-pit-table', ['ngMaterial', 'ngCsv', 'angular-loading-bar'])\n  .config(function (pitTableProvider, ANGULAR_PIT_TABLE) {\n    pitTableProvider.setOptions(ANGULAR_PIT_TABLE);\n  })\n  .config(function (cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.includeBar = false;\n    cfpLoadingBarProvider.parentSelector = '#loading-container';\n  });","angular\n  .module('angular-pit-table')\n  .provider('pitTable', function () {\n    var defaultOptions = {\n      pageRadious: 2,\n      pageSize: 20,\n      emptyTableText: 'Ningún dato disponible en esta tabla.',\n      loadingTableText: 'Cargando datos...',\n      method: 'GET',\n      pageSizes: [10, 25, 50, 100],\n      searchTrigger: 2\n    };\n    var newOptions = {};\n\n    this.setOptions = function (options) {\n      angular.extend(newOptions, options);\n    };\n\n    function PitTableOptions(option) {\n      this.pageRadious = angular.isNumber(option.pageRadious) ? option.pageRadious : defaultOptions.pageRadious;\n      if (angular.isNumber(option.pageSize)) {\n        if (option.pageSizes.indexOf(option.pageSize) > 0) {\n          this.pageSize = option.pageSize;\n        } else {\n          this.pageSize = Math.min.apply(null, option.pageSizes);\n        }\n      } else {\n        this.pageSize = defaultOptions.pageSize;\n      }\n      this.emptyTableText = option.emptyTableText;\n      this.loadingTableText = option.loadingTableText;\n      if (option.uiFramework && (option.uiFramework === 'bootstrap' || option.uiFramework === 'material')) {\n        this.uiFramework = option.uiFramework;\n      }\n      this.method = defaultOptions.method;\n      this.pageSizes = angular.isArray(option.pageSizes) && option.pageSizes.every(function (size) {\n        return angular.isNumber(size) && size > 0;\n      }) ? option.pageSizes : defaultOptions.pageSizes;\n\n      this.searchTrigger = angular.isNumber(option.searchTrigger) ? option.searchTrigger : defaultOptions.searchTrigger;\n    }\n\n    this.$get = function () {\n      return new PitTableOptions(angular.extend({}, defaultOptions, newOptions));\n    };\n  });\n","angular\n  .module('angular-pit-table')\n  .component('ptable', {\n    templateUrl: 'app/components/pit_table/pit-table.html',\n    bindings: {\n      ptColumns: '<',\n      ptParameters: '<',\n      ptData: '=',\n      selectedC: '<',\n      unSelectedC: '<'\n    },\n    controller: function (pitTable, $log, $http, $rootScope, cfpLoadingBar) {\n      var ctrl = this;\n      ctrl.emptyTableText = pitTable.emptyTableText;\n      ctrl.loadingTableText = pitTable.loadingTableText;\n      ctrl.uiFramework = pitTable.uiFramework;\n      ctrl.isLoading = false;\n      ctrl.utils = {\n        sort: [],\n        pagination: {\n          page: 0,\n          size: pitTable.pageSize,\n          totalRows: 0,\n          totalPages: 0\n        },\n        search: '',\n        pageSizes: pitTable.pageSizes,\n        allSelected: false,\n        searchTrigger: pitTable.searchTrigger\n      };\n\n      $rootScope.$on('cfpLoadingBar:started', function() {\n        ctrl.isLoading = true;\n      });\n\n      $rootScope.$on('cfpLoadingBar:completed', function() {\n        ctrl.isLoading = false;   \n      });\n\n      ctrl.$onInit = function () {\n        ctrl.ptParameters.loadData = function () {\n          getData();\n        };\n\n        ctrl.ptParameters.loadData();\n      };\n\n      var getSort = function () {\n        ctrl.utils.sort = [];\n        for(var i = 0; i < ctrl.ptColumns.length; i++) {\n          if(ctrl.ptColumns[i].sortable && angular.isDefined(ctrl.ptColumns[i].sort)) {\n            if(!ctrl.ptParameters.multipleOrder){\n              if(ctrl.ptColumns[i].sort !== 'natural') {\n                ctrl.utils.sort.push(ctrl.ptColumns[i].id + ',' + ctrl.ptColumns[i].sort);\n                break;\n              }\n            }else{\n              ctrl.utils.sort.push(ctrl.ptColumns[i].id + ',' + ((ctrl.ptColumns[i].sort === 'natural') ? 'asc' : ctrl.ptColumns[i].sort));\n            }\n          }\n        }  \n      };\n\n      var getData = function () {\n        getSort();\n        var object = {\n          url: ctrl.ptParameters.url,\n          method: ctrl.ptParameters.method\n        };\n\n        object.params = {\n          sort: ctrl.utils.sort,\n          page: ctrl.utils.pagination.page,\n          size: ctrl.utils.pagination.size\n        };\n\n        if (ctrl.utils.search) {\n          object.params.search = ctrl.utils.search;\n        }\n\n        if (ctrl.ptParameters.projection) {\n          angular.extend(object.params, {projection: ctrl.ptParameters.projection});\n        }\n\n        if (!ctrl.ptParameters.inBody || ctrl.ptParameters.projection) {\n          angular.extend(object.params, ctrl.ptParameters.params);\n        } else {\n          object.data = ctrl.ptParameters.params;\n        }\n\n        cfpLoadingBar.start();\n        $http(object).then(function (response) {\n          var data = ctrl.ptParameters.projection ? response.data._embedded[ctrl.ptParameters.projection] : response.data.content;\n          ctrl.ptData = data;\n          if (ctrl.ptParameters.selectId) {\n            ctrl.ptDataTemp = angular.copy(data);\n            initSelected(data);\n          }\n          ctrl.utils.pagination.page = ctrl.ptParameters.projection ? response.data.page.number : response.data.number;\n          ctrl.utils.pagination.totalRows = ctrl.ptParameters.projection ? response.data.page.totalElements : response.data.totalElements;\n          ctrl.utils.pagination.totalPages = ctrl.ptParameters.projection ? response.data.page.totalPages : response.data.totalPages;\n        }, function () {\n          $log.error('Ha ocurrido un error al intentar obtener la información.');\n        }).finally(function () {\n          cfpLoadingBar.complete();\n        });\n      };\n\n      ctrl.columnOrder = function (column) {\n        if (angular.isUndefined(column.sort) || !ctrl.ptData.length) {\n          return;\n        }\n\n        for(var i = 0; i < ctrl.ptColumns.length; i++) {\n          if (column.id === ctrl.ptColumns[i].id) {\n            if (ctrl.ptColumns[i].sort === 'natural') {\n              ctrl.ptColumns[i].sort = 'asc';\n            } else if (ctrl.ptColumns[i].sort === 'asc') {\n              ctrl.ptColumns[i].sort = 'desc';\n            } else {\n              ctrl.ptColumns[i].sort = 'natural';\n            }\n\n            if(ctrl.ptParameters.multipleOrder) {\n              break;\n            }\n          } else {\n            if(!ctrl.ptParameters.multipleOrder) {\n              ctrl.ptColumns[i].sort = 'natural';\n            }\n          }\n        }\n        ctrl.ptParameters.loadData();\n      };\n\n      ctrl.thIconClass = function (sort) {\n        if (angular.isDefined(sort)) {\n          return ctrl.uiFramework === 'bootstrap' ? {\n            'fa-sort': sort === 'natural',\n            'fa-sort-desc': sort === 'desc',\n            'fa-sort-asc': sort === 'asc'\n          } : {\n            'md-asc': sort === 'natural' || sort === 'asc',\n            'md-desc': sort === 'desc'\n          };\n        }\n      };\n\n      var initSelected = function (data) {\n        var cont = 0;\n        angular.forEach(data, function (item) {\n          if (item.isCheck) {\n            cont++;\n          }\n\n          angular.forEach(ctrl.selectedC, function (value) {\n            if (item[ctrl.ptParameters.selectId] === value) {\n              item.isCheck = true;\n              cont++;\n            }\n          });\n\n          angular.forEach(ctrl.unSelectedC, function (value) {\n            if (item[ctrl.ptParameters.selectId] === value) {\n              item.isCheck = false;\n              cont--;\n            }\n          });\n        });\n\n        ctrl.utils.allSelected = (cont === data.length && data.length > 0);\n      };\n    }\n  });\n","angular\n  .module('angular-pit-table')\n  .component('pttoolbar', {\n    templateUrl: 'app/components/pit_table/pit-table-toolbar.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    controller: function ($http, $log) {\n      var ctrl = this;\n\n      ctrl.search = function (text) {\n      \tif(text !== '' && text.length > ctrl.ptableCtrl.utils.searchTrigger) {\n      \t\tctrl.ptableCtrl.utils.pagination.page = 0;\n        \tctrl.ptableCtrl.utils.search = text;\n        \tctrl.ptableCtrl.ptParameters.loadData();\n      \t}else if(text === '') {\n      \t\tdelete ctrl.filterModel;\n        \tctrl.ptableCtrl.utils.search = text;\n        \tctrl.ptableCtrl.ptParameters.loadData();\n      \t}\n  \t\t      \t      \n      };\n\n      ctrl.removeSearch = function () {\n        if (!ctrl.filterModel) {\n          return;\n        }\n        delete ctrl.filterModel;\n        ctrl.ptableCtrl.utils.search = '';\n        ctrl.ptableCtrl.ptParameters.loadData();\n      };\n\n      ctrl.downloadCSV = function () {\n        var object = {\n          url: ctrl.ptableCtrl.ptParameters.url,\n          method: ctrl.ptableCtrl.ptParameters.method,\n          ignoreLoadingBar: true\n        };\n\n        object.params = {\n          sort: ctrl.ptableCtrl.utils.sort\n        };\n\n        if (ctrl.ptableCtrl.utils.search) {\n          object.params.search = ctrl.ptableCtrl.utils.search;\n        }\n\n        if (ctrl.ptableCtrl.ptParameters.projection) {\n          object.params = {projection: ctrl.ptableCtrl.ptParameters.projection};\n        }\n\n        if (!ctrl.ptableCtrl.ptParameters.inBody || ctrl.ptableCtrl.ptParameters.projection) {\n          angular.extend(object.params, ctrl.ptableCtrl.ptParameters.params);\n        } else {\n          object.data = ctrl.ptableCtrl.ptParameters.params;\n        }\n        return $http(object).then(function (response) {\n          setColumnsNameCSV(ctrl.ptableCtrl.ptParameters.projection ? response.data._embedded[ctrl.ptableCtrl.ptParameters.projection] : response.data.content);\n          return ctrl.ptableCtrl.ptParameters.projection ? response.data._embedded[ctrl.ptableCtrl.ptParameters.projection] : response.data.content;\n        }, function () {\n          $log.error('Ha ocurrido un error al intentar obtener la información.');\n        });\n      };\n\n      ctrl.getCSVFilename = function() {\n        return ctrl.ptableCtrl.ptParameters.tableName ? ctrl.ptableCtrl.ptParameters.tableName : 'export.csv';\n      };\n\n      var setColumnsNameCSV = function(data) {\n        var fieldNames = [];\n        var fieldIds = [];\n\n        for(var j = 0; j < ctrl.ptableCtrl.ptColumns.length; j++){\n          if(!containsObject(ctrl.ptableCtrl.ptColumns[j], fieldNames, 'name', 'id') && ctrl.ptableCtrl.ptColumns[j].exportable) {\n            if(ctrl.ptableCtrl.ptColumns[j].name) {\n              fieldNames.push({key: ctrl.ptableCtrl.ptColumns[j].id, value: ctrl.ptableCtrl.ptColumns[j].name});\n              if(fieldIds.indexOf(ctrl.ptableCtrl.ptColumns[j].id) === -1) fieldIds.push(ctrl.ptableCtrl.ptColumns[j].name);\n            }else{\n              fieldNames.push({key: ctrl.ptableCtrl.ptColumns[j].id, value: ctrl.ptableCtrl.ptColumns[j].id});\n              if(fieldIds.indexOf(ctrl.ptableCtrl.ptColumns[j].id) === -1) fieldIds.push(ctrl.ptableCtrl.ptColumns[j].id);\n            }\n          }\n\n          if(ctrl.ptableCtrl.ptColumns[j].render && fieldNames.length > 0 && ctrl.ptableCtrl.ptColumns[j].exportable){\n            fieldNames[fieldNames.length - 1].render = ctrl.ptableCtrl.ptColumns[j].render;\n          }\n\n        }\n\n        for(var i = 0; i < data.length; i++) {\n          var dataKeys = Object.keys(data[i]);\n          // crea campo con nombre de la columna y el campo con el id eliminado\n          for(var j = 0; j < fieldNames.length; j++) {\n            if(dataKeys.indexOf(fieldNames[j].key) >= 0){\n              data[i][fieldNames[j].value] = data[i][fieldNames[j].key];\n              var tempData = angular.copy(data[i]);\n              if(fieldNames[j].key.toLowerCase() !== 'id'){\n                delete data[i][fieldNames[j].key];\n              }  \n              // campos null\n              if(!data[i][fieldNames[j].value]){\n                data[i][fieldNames[j].value] = '-';\n              }\n\n              if(fieldNames[j].render) {\n                data[i][fieldNames[j].value] = ctrl.ptableCtrl.ptColumns[j].renderFn(tempData);\n              }\n\n            }else{\n              data[i][fieldNames[j].value] = '-';\n            }\n          } \n\n          // elimina las columnas que no aparecen en la tabla\n          for(var k = 0; k < dataKeys.length; k++) {\n            if(fieldIds.indexOf(dataKeys[k]) === -1){\n              delete data[i][dataKeys[k]];\n            }\n          }        \n        }\n      };\n\n      var containsObject = function(obj, data, property1, property2) {\n        if(obj && data.length && property1 && property2) {\n           for (var i = 0; i < data.length; i++) {\n            if(data[i][property1] === obj[property1] && data[i][property2] === obj[property2]) {\n              return true;\n            }\n          }\n        }      \n        \n        return false;\n      };\n\n    }\n  });\n","angular\n  .module('angular-pit-table')\n  .component('ptpage', {\n    templateUrl: 'app/components/pit_table/pit-table-pagination.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    controller: function () {\n    \tvar ctrl = this;\n\n    \tctrl.showInfo = function () {\n    \t\treturn 'Mostrando registros del '+ ((ctrl.ptableCtrl.utils.pagination.page * ctrl.ptableCtrl.utils.pagination.size) + 1) +' al '+ \n    \t\t(ctrl.ptableCtrl.utils.pagination.totalRows%ctrl.ptableCtrl.utils.pagination.size === 0 ? (ctrl.ptableCtrl.utils.pagination.page + 1) * ctrl.ptableCtrl.utils.pagination.size : ctrl.ptableCtrl.utils.pagination.totalRows) +' de '+ (ctrl.ptableCtrl.utils.pagination.totalRows);\n    \t};\n\n    \tctrl.showInfoMaterial = function () {\n    \t\tvar from = (ctrl.ptableCtrl.utils.pagination.page * ctrl.ptableCtrl.utils.pagination.size) + 1;\n    \t\tvar to = (ctrl.ptableCtrl.utils.pagination.page * ctrl.ptableCtrl.utils.pagination.size) + ctrl.ptableCtrl.utils.pagination.size;\n    \t\treturn from +' - '+ (to > ctrl.ptableCtrl.utils.pagination.totalRows ? ctrl.ptableCtrl.utils.pagination.totalRows : to) +' de '+ ctrl.ptableCtrl.utils.pagination.totalRows;\n    \t};\n\n    \tctrl.previous = function () {\n    \t\tctrl.ptableCtrl.utils.pagination.page--;\n    \t\tctrl.ptableCtrl.ptParameters.loadData();\n    \t};\n\n    \tctrl.next = function () {\n    \t\tctrl.ptableCtrl.utils.pagination.page++;\n    \t\tctrl.ptableCtrl.ptParameters.loadData();\n    \t};\n\n    \tctrl.getSelectPages = function () {\n\t\t\tvar pages = [];\n\t    \tfor(var i = 0; i < ctrl.ptableCtrl.utils.pagination.totalPages; i++) {\n\t    \t\tpages.push(i);\n\t    \t}\n\t    \treturn pages;\n\t\t};\n\n\t\tctrl.goToPage = function (page) {\n    \t\tctrl.ptableCtrl.ptParameters.loadData();\n\t\t};    \t\n    }\n  });\n","angular\n  .module('angular-pit-table')\n  .component('ptpsize', {\n    templateUrl: 'app/components/pit_table/pit-table-pagination-size.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    controller: function () {\n    \tvar ctrl = this;\n\n      \tctrl.$onInit = function () {\n        \tctrl.pageSizes = ctrl.ptableCtrl.utils.pageSizes;\n        \tctrl.size = ctrl.ptableCtrl.utils.pagination.size;\n      \t};\n\n      \tctrl.selectSize = function (size) {\n      \t\tctrl.ptableCtrl.utils.pagination.page = 0;\n        \tctrl.ptableCtrl.utils.pagination.size = size;\n        \tctrl.ptableCtrl.ptParameters.loadData();\n      \t};\n    }\n  });\n","angular\n    .module('angular-pit-table')\n    .component('ptdrender', {\n        bindings: {\n            ptData: '<',\n            directiveName: '<',\n            renderFn: '='\n        },\n        require: {\n            ptableCtrl: '^ptable'\n        },\n        controller: function ($scope, $element, $attrs, $compile) {\n            var ctrl = this;\n            $element.append($compile('<'+ctrl.directiveName+ ' row-data=\"$ctrl.ptData\" render-fn=\"$ctrl.renderFn\"></'+ctrl.directiveName+'>')($scope));\n        }\n    });\n","angular\n  .module('angular-pit-table')\n  .component('ptcheckbox', {\n    templateUrl: 'app/components/pit_table/pit-table-checkbox.html',\n    require: {\n      ptableCtrl: '^ptable'\n    },\n    bindings: {\n      inHeader: '=',\n      item: '<'\n    },\n    controller: function () {\n      var ctrl = this;\n      ctrl.$onInit = function () {\n        ctrl.selectItem = function (item) {\n          var cont = 0;\n          updateArray(item);\n\n          angular.forEach(ctrl.ptableCtrl.ptData, function (value) {\n            if (value.isCheck) {\n              cont++;\n            }\n          });\n\n          ctrl.ptableCtrl.utils.allSelected = (cont === ctrl.ptableCtrl.ptData.length && ctrl.ptableCtrl.ptData.length > 0);\n        };\n\n        ctrl.selectAll = function (selected) {\n          angular.forEach(ctrl.ptableCtrl.ptDataTemp, function (value, key) {\n            ctrl.ptableCtrl.ptData[key].isCheck = selected;\n            var indexAdd = -1;\n            var indexRemove = -1;\n            if (selected) {\n              indexAdd = ctrl.ptableCtrl.selectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (!value.isCheck && indexAdd < 0) {\n                ctrl.ptableCtrl.selectedC.push(value[ctrl.ptableCtrl.ptParameters.selectId.selectId]);\n              }\n\n              indexRemove = ctrl.ptableCtrl.unSelectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (indexRemove > -1) {\n                ctrl.ptableCtrl.unSelectedC.splice(indexRemove, 1);\n              }\n            } else {\n              indexRemove = ctrl.ptableCtrl.selectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (value.isCheck && indexRemove < 0) {\n                ctrl.ptableCtrl.unSelectedC.push(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              }\n\n              indexAdd = ctrl.ptableCtrl.selectedC.indexOf(value[ctrl.ptableCtrl.ptParameters.selectId]);\n              if (indexAdd > -1) {\n                ctrl.ptableCtrl.selectedC.splice(indexAdd, 1);\n              }\n            }\n          });\n        };\n      };\n\n      function updateArray(item) {\n        var exists = false;\n        var arraySplice = item.isCheck ? ctrl.ptableCtrl.unSelectedC : ctrl.ptableCtrl.selectedC;\n        var arrayPush = item.isCheck ? ctrl.ptableCtrl.selectedC : ctrl.ptableCtrl.unSelectedC;\n        var indexSplice = arraySplice.indexOf(item[ctrl.ptableCtrl.ptParameters.selectId]);\n\n        angular.forEach(ctrl.ptableCtrl.ptDataTemp, function (value) {\n          var isCheck = item.isCheck ? !value.isCheck : value.isCheck;\n          if (item[ctrl.ptableCtrl.ptParameters.selectId] === value[ctrl.ptableCtrl.ptParameters.selectId] && isCheck) {\n            exists = true;\n          }\n        });\n\n        if (arraySplice.length > 0 && indexSplice > -1) {\n          arraySplice.splice(indexSplice, 1);\n        }\n\n        if (exists) {\n          arrayPush.push(item[ctrl.ptableCtrl.ptParameters.selectId]);\n        }\n      }\n    }\n  });\n","angular.module('angular-pit-table')\n.constant('ANGULAR_PIT_TABLE', {\n  pageRadious: 2,\n  pageSize: 10,\n  emptyTableText: 'Ningún dato disponible en esta tabla.',\n  loadingTableText: 'Cargando datos...',\n  uiFramework: 'material',\n  pageSizes: [\n    10,\n    25,\n    50,\n    100\n  ],\n  searchTrigger: 2\n});\n","angular\n  .module('angular-pit-table')\n  .component('demo', {\n    templateUrl: 'app/components/demo.html',\n    controller: function (PTColumnBuilder, PTParamsBuilder) {\n      var ctrl = this;\n\n      ctrl.ptColumns = [\n        PTColumnBuilder.newColumn('id'),\n        PTColumnBuilder.newColumn('title').withName('Título').withOrder('asc').withClass('text-center').notExportable(),\n        PTColumnBuilder.newColumn('body').withName('Contenido').withOrder('asc'),\n        PTColumnBuilder.newColumn('lala').withName('LOLO').withOrder('asc'),\n        PTColumnBuilder.newColumn('userId').withName('Usuario')\n\n      ];\n\n      console.log(ctrl.ptColumns);\n\n      ctrl.ptParams = PTParamsBuilder.newParams().withUrl('http://localhost:3000/content').withMethod('GET', false);\n\n      ctrl.selectedC = [];\n      ctrl.unSelectedC = [];\n    }\n  });\n","angular.module('angular-pit-table').run(['$templateCache', function($templateCache) {$templateCache.put('app/components/demo.html','<h1>Demo PIT Table</h1>\\n<ptable pt-columns=\"$ctrl.ptColumns\" pt-data=\"$ctrl.data\" pt-parameters=\"$ctrl.ptParams\" selected-c=\"$ctrl.selectedC\" un-selected-c=\"$ctrl.unSelectedC\"></ptable>\\n');\n$templateCache.put('app/components/pit_table/pit-table-checkbox.html','<div ng-if=\"$ctrl.inHeader && ($ctrl.ptableCtrl.uiFramework === \\'bootstrap\\' || !$ctrl.ptableCtrl.uiFramework)\" ng-class=\"{\\'header-checkbox\\' : $ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'}\">\\n\\t<input type=\"checkbox\" class=\"cursor-pointer\" ng-change=\"$ctrl.selectAll($ctrl.ptableCtrl.utils.allSelected)\" ng-model=\"$ctrl.ptableCtrl.utils.allSelected\">\\n</div>\\n<div ng-if=\"!$ctrl.inHeader && ($ctrl.ptableCtrl.uiFramework === \\'bootstrap\\' || !$ctrl.ptableCtrl.uiFramework)\" ng-class=\"{\\'body-checkbox\\' : $ctrl.ptableCtrl.uiFramework === \\'bootstrap\\' || !$ctrl.ptableCtrl.uiFramework}\">\\n\\t<input type=\"checkbox\" class=\"cursor-pointer\" ng-change=\"$ctrl.selectItem($ctrl.item)\" ng-model=\"$ctrl.item.isCheck\">\\n</div>\\n<md-checkbox ng-if=\"$ctrl.inHeader && $ctrl.ptableCtrl.uiFramework === \\'material\\'\" ng-change=\"$ctrl.selectAll($ctrl.ptableCtrl.utils.allSelected)\" class=\"margin-auto\" ng-model=\"$ctrl.ptableCtrl.utils.allSelected\" aria-label=\"\">\\n</md-checkbox>\\n<md-checkbox ng-if=\"!$ctrl.inHeader && $ctrl.ptableCtrl.uiFramework === \\'material\\'\" ng-change=\"$ctrl.selectItem($ctrl.item)\" class=\"margin-auto\" ng-model=\"$ctrl.item.isCheck\" aria-label=\"\"></md-checkbox>\\n');\n$templateCache.put('app/components/pit_table/pit-table-pagination-size.html','<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'material\\'\">\\t\\n\\t<div class=\"text-rows-per-page\">Filas por p\\xE1gina:</div>\\n\\t<md-select class=\"md-table-select md-select-paginator\" ng-model=\"$ctrl.size\" ng-change=\"$ctrl.selectSize($ctrl.size)\">\\n\\t\\t<md-option ng-repeat=\"size in $ctrl.pageSizes\" ng-value=\"size\">{{ size }}</md-option>\\n\\t</md-select>\\n</div>\\n\\n<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'\">\\n\\t<label for=\"size\">Mostrar</label>\\n\\t<div class=\"form-group\">\\n\\t\\t<select class=\"form-control\" name=\"size\" id=\"size\" ng-model=\"$ctrl.size\" ng-change=\"$ctrl.selectSize($ctrl.size)\" ng-options=\"size for size in $ctrl.pageSizes track by size\"></select>\\n\\t</div>\\n</div>\\n\\n<div ng-if=\"!$ctrl.ptableCtrl.uiFramework\">\\n\\t<label>\\n      Mostrar\\n      <select ng-model=\"$ctrl.size\" ng-change=\"$ctrl.selectSize($ctrl.size)\" ng-options=\"size for size in $ctrl.pageSizes track by size\"></select>\\n      entradas\\n    </label>\\n</div>\\n');\n$templateCache.put('app/components/pit_table/pit-table-pagination.html','<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'\" class=\"row\">\\n  <div class=\"col-xs-12 col-md-6\">\\n    {{ $ctrl.showInfo() }}\\n  </div>\\n  <div class=\"col-xs-12 col-md-6 text-right\">\\n    1, 2, 3, 4...\\n  </div>\\n</div>\\n<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'material\\'\" class=\"md-table-pagination\">\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<div class=\"text-rows-per-page\">P\\xE1gina:</div>\\n\\t\\t<md-select class=\"md-table-select md-select-paginator\" ng-model=\"$ctrl.ptableCtrl.utils.pagination.page\" ng-change=\"$ctrl.goToPage()\">\\n\\t\\t\\t<md-option ng-repeat=\"page in $ctrl.getSelectPages()\" ng-value=\"page\">{{ page + 1 }}</md-option>\\n\\t\\t</md-select>\\n\\t</div>\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<ptpsize></ptpsize>\\n\\t</div>\\n\\t<div class=\"item-md-table-paginator\">\\n\\t\\t<span> {{ $ctrl.showInfoMaterial() }} </span>\\n\\t</div>\\n\\t<div class=\"item-md-table-paginator last-item\">\\n\\t\\t<button class=\"md-icon-button md-button md-ink-ripple margin-0\" type=\"button\" ng-click=\"$ctrl.previous()\" ng-disabled=\"$ctrl.ptableCtrl.utils.pagination.page == 0\">\\n          <md-icon class=\"material-icons\"><i class=\"material-icons\">keyboard_arrow_left</i></md-icon>\\n        </button>\\n        <button style=\"margin: 0;\" class=\"md-icon-button md-button md-ink-ripple margin-0\" type=\"button\" ng-click=\"$ctrl.next()\" ng-disabled=\"$ctrl.ptableCtrl.utils.pagination.page == ($ctrl.ptableCtrl.utils.pagination.totalPages - 1)\">\\n          <md-icon class=\"material-icons\"><i class=\"material-icons\">keyboard_arrow_right</i></md-icon>\\n        </button>\\n\\t</div>\\n</div>');\n$templateCache.put('app/components/pit_table/pit-table-toolbar.html','<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'material\\'\">\\n  <md-card>\\n    <md-toolbar class=\"md-table-toolbar md-default\">\\n      <div class=\"md-toolbar-tools\">\\n        <div id=\"loading-container\">\\n          <md-icon class=\"material-icons pt-search\">search</md-icon>\\n        </div>\\n        <form flex name=\"filter.form\">\\n          <input ng-model=\"$ctrl.filterModel\" ng-change=\"$ctrl.search($ctrl.filterModel)\" class=\"md-block\">\\n        </form>\\n        <button class=\"md-icon-button md-button md-ink-ripple\" type=\"button\" ng-click=\"$ctrl.removeSearch()\" ng-if=\"$ctrl.filterModel\">\\n          <md-icon class=\"material-icons\">close</md-icon>\\n        </button>\\n        <button class=\"md-icon-button md-button md-ink-ripple\" type=\"button\" ng-csv=\"$ctrl.downloadCSV()\" csv-label=\"true\" filename=\"export.csv\">\\n          <md-icon class=\"material-icons\">file_download</md-icon>\\n        </button>\\n      </div>\\n    </md-toolbar>\\n  </md-card>\\n</div>\\n\\n<div ng-if=\"$ctrl.ptableCtrl.uiFramework === \\'bootstrap\\'\" class=\"row\">\\n  <form class=\"form-inline\">\\n    <div class=\"col-xs-12 col-sm-6\">\\n      <ptpsize></ptpsize>\\n    </div>\\n    <div class=\"col-xs-12 col-sm-6 search-control\">\\n      <label for=\"search\">Buscar</label>\\n      <div class=\"input-group\">\\n        <input class=\"form-control\" name=\"search\" id=\"search\" ng-model=\"$ctrl.filterModel\" ng-change=\"$ctrl.search($ctrl.filterModel)\">\\n        <span class=\"input-group-addon input-group-addon-custom\">\\n            <i class=\"fa fa-close\" ng-click=\"$ctrl.removeSearch()\"></i>\\n        </span>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\\n<div ng-if=\"!$ctrl.ptableCtrl.uiFramework\" class=\"height-no-bootstrap\">\\n  <div class=\"size-control\">\\n    <ptpsize></ptpsize>\\n  </div>\\n  <div class=\"search-control\">\\n    <label>\\n      Buscar:\\n      <input class=\"input-search\" ng-model=\"$ctrl.filterModel\" ng-change=\"$ctrl.search($ctrl.filterModel)\">\\n      <button class=\"close-icon\" type=\"reset\" ng-click=\"$ctrl.removeSearch()\" ng-if=\"$ctrl.filterModel\"></button>\\n    </label>\\n  </div>\\n</div>\\n');\n$templateCache.put('app/components/pit_table/pit-table.html','<div ng-class=\"{ \\'md-table-container\\' : $ctrl.uiFramework === \\'material\\', \\'container-fluid\\': $ctrl.uiFramework === \\'bootstrap\\', \\'table-container\\': !$ctrl.uiFramework }\">\\n  <pttoolbar is-loading=\"$ctrl.isLoading\"></pttoolbar>\\n  <div ng-class=\"{\\'md-card-pitable\\' : $ctrl.uiFramework === \\'material\\'}\">\\n    <div ng-class=\"{\\'md-table-container\\' : $ctrl.uiFramework === \\'material\\'}\">\\n      <table ng-class=\"{ \\'table table-bordered table-striped table-responsive\\': $ctrl.uiFramework === \\'bootstrap\\', \\'md-table\\': $ctrl.uiFramework === \\'material\\', \\'md-row-select\\': $ctrl.uiFramework === \\'material\\' && $ctrl.ptParams.selectId }\">\\n        <thead ng-class=\"{ \\'md-head\\': $ctrl.uiFramework === \\'material\\' }\">\\n          <tr ng-class=\"{ \\'md-row\\': $ctrl.uiFramework === \\'material\\' }\">\\n            <th ng-if=\"$ctrl.ptParameters.selectId && $ctrl.ptData.length\" ng-class=\"{\\'th-checkbox\\' : $ctrl.uiFramework === \\'bootstrap\\' || !$ctrl.uiFramework, \\'padding-only-left\\' : $ctrl.uiFramework === \\'material\\'}\">\\n              <ptcheckbox in-header=\"true\"></ptcheckbox>\\n            </th>\\n            <th ng-repeat=\"column in $ctrl.ptColumns\" class=\"{{ column.thClazz }}\" ng-class=\"{ \\'sortable\\': column.sortable && $ctrl.ptData.length && $ctrl.uiFramework === \\'bootstrap\\', \\'md-sort\\': column.sortable && $ctrl.ptData.length && $ctrl.uiFramework === \\'material\\', \\'md-column\\': $ctrl.uiFramework === \\'material\\', \\'md-active\\': $ctrl.uiFramework === \\'material\\' && column.sortable && column.sort !== \\'natural\\' }\">\\n              <span ng-click=\"$ctrl.columnOrder(column)\">\\n                {{ column.name }}\\n                <fieldset ng-if=\"column.sortable && $ctrl.ptData.length\">\\n                  <i class=\"pull-right fa\" ng-class=\"$ctrl.thIconClass(column.sort)\" ng-if=\"$ctrl.uiFramework === \\'bootstrap\\'\"></i>\\n                  <md-icon class=\"md-sort-icon\" ng-class=\"$ctrl.thIconClass(column.sort)\" ng-if=\"$ctrl.uiFramework === \\'material\\'\">arrow_upward</md-icon>\\n                  </fieldset>\\n              </span>\\n            </th>\\n          </tr>\\n        </thead>\\n        <tbody ng-class=\"{ \\'md-body\\': $ctrl.uiFramework === \\'material\\' }\">\\n          <tr ng-class=\"{ \\'md-row\\': $ctrl.uiFramework === \\'material\\' }\" ng-repeat=\"data in $ctrl.ptData\" ng-if=\"!$ctrl.isLoading\">\\n            <td ng-if=\"$ctrl.ptParameters.selectId\" class=\"td-checkbox\" ng-class=\"{ \\'md-cell md-checkbox-cell\\': $ctrl.uiFramework === \\'material\\' }\">\\n              <ptcheckbox in-header=\"false\" item=\"data\"></ptcheckbox>\\n            </td>\\n            <td ng-repeat=\"column in $ctrl.ptColumns\" ng-class=\"{ \\'md-cell\\': $ctrl.uiFramework === \\'material\\' }\" class=\"{{ column.clazz }}\">            \\n              <span ng-if=\"!column.render\">{{ data[column.id] }}</span>\\n              <ptdrender ng-if=\"column.render\" directive-name=\"column.render\" pt-data=\"data\" render-fn=\"column.renderFn\"></ptdrender>\\n            </td>\\n          </tr>\\n          <tr ng-if=\"$ctrl.isLoading || !$ctrl.ptData.length\" ng-class=\"{ \\'md-row\\': $ctrl.uiFramework === \\'material\\' }\" style=\"height: 90px;\">\\n            <td ng-class=\"{ \\'md-cell\\': $ctrl.uiFramework === \\'material\\' }\" class=\"text-center\" colspan=\"{{ $ctrl.ptColumns.length }}\">{{ $ctrl.isLoading ? $ctrl.loadingTableText : $ctrl.emptyTableText }}</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <ptpage></ptpage>\\n  </div>\\n</div>\\n');}]);"]}